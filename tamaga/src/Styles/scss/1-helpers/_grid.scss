@use "sass:math";

$grid-columns: 12;

$grid-gaps: (
  "0" : 0,
  "2" : $spacing20,
);

@each $key, $value in $grid-gaps {
  .gap-#{$key} > * {
    padding: $value;
  }
  .gap-#{$key} {
    margin-left: -$value;
    margin-right: -$value;
  }
}

.container {
  width: 100%;
  margin: 0 auto;
  padding: 0 20px;
  // max-width: ;
  box-sizing: border-box;
  background-color: red;
}

.row {
display: flex;
flex-flow: row wrap;
background-color: lightskyblue;
}

@include xs {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i*100%, $grid-columns);
    }
  }
}

@include sm {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i*100%, $grid-columns);
    }
  }
}

@include md {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i*100%, $grid-columns);
    }
  }
}

@include lg {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i*100%, $grid-columns);
    }
  }
}

@include xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i*100%, $grid-columns);
    }
  }
}